// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get newFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NFTBought extends ethereum.Event {
  get params(): NFTBought__Params {
    return new NFTBought__Params(this);
  }
}

export class NFTBought__Params {
  _event: NFTBought;

  constructor(event: NFTBought) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTListed extends ethereum.Event {
  get params(): NFTListed__Params {
    return new NFTListed__Params(this);
  }
}

export class NFTListed__Params {
  _event: NFTListed;

  constructor(event: NFTListed) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTUnlisted extends ethereum.Event {
  get params(): NFTUnlisted__Params {
    return new NFTUnlisted__Params(this);
  }
}

export class NFTUnlisted__Params {
  _event: NFTUnlisted;

  constructor(event: NFTUnlisted) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformFeeUpdated extends ethereum.Event {
  get params(): PlatformFeeUpdated__Params {
    return new PlatformFeeUpdated__Params(this);
  }
}

export class PlatformFeeUpdated__Params {
  _event: PlatformFeeUpdated;

  constructor(event: PlatformFeeUpdated) {
    this._event = event;
  }

  get newFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SignerUpdated extends ethereum.Event {
  get params(): SignerUpdated__Params {
    return new SignerUpdated__Params(this);
  }
}

export class SignerUpdated__Params {
  _event: SignerUpdated;

  constructor(event: SignerUpdated) {
    this._event = event;
  }

  get newSigner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NFTMarket__listingsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSeller(): Address {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }
}

export class NFTMarket extends ethereum.SmartContract {
  static bind(address: Address): NFTMarket {
    return new NFTMarket("NFTMarket", address);
  }

  erc20Token(): Address {
    let result = super.call("erc20Token", "erc20Token():(address)", []);

    return result[0].toAddress();
  }

  try_erc20Token(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20Token", "erc20Token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  listings(param0: Address, param1: BigInt): NFTMarket__listingsResult {
    let result = super.call(
      "listings",
      "listings(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new NFTMarket__listingsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_listings(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<NFTMarket__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarket__listingsResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeePercentage(): BigInt {
    let result = super.call(
      "platformFeePercentage",
      "platformFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeePercentage",
      "platformFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signer(): Address {
    let result = super.call("signer", "signer():(address)", []);

    return result[0].toAddress();
  }

  try_signer(): ethereum.CallResult<Address> {
    let result = super.tryCall("signer", "signer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokensReceived(sender: Address, amount: BigInt, data: Bytes): Bytes {
    let result = super.call(
      "tokensReceived",
      "tokensReceived(address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_tokensReceived(
    sender: Address,
    amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tokensReceived",
      "tokensReceived(address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _erc20Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _signer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ListCall extends ethereum.Call {
  get inputs(): ListCall__Inputs {
    return new ListCall__Inputs(this);
  }

  get outputs(): ListCall__Outputs {
    return new ListCall__Outputs(this);
  }
}

export class ListCall__Inputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListCall__Outputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }
}

export class PermitBuyCall extends ethereum.Call {
  get inputs(): PermitBuyCall__Inputs {
    return new PermitBuyCall__Inputs(this);
  }

  get outputs(): PermitBuyCall__Outputs {
    return new PermitBuyCall__Outputs(this);
  }
}

export class PermitBuyCall__Inputs {
  _call: PermitBuyCall;

  constructor(call: PermitBuyCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get permit(): PermitBuyCallPermitStruct {
    return changetype<PermitBuyCallPermitStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class PermitBuyCall__Outputs {
  _call: PermitBuyCall;

  constructor(call: PermitBuyCall) {
    this._call = call;
  }
}

export class PermitBuyCallPermitStruct extends ethereum.Tuple {
  get buyer(): Address {
    return this[0].toAddress();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get v(): i32 {
    return this[2].toI32();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlistCall extends ethereum.Call {
  get inputs(): UnlistCall__Inputs {
    return new UnlistCall__Inputs(this);
  }

  get outputs(): UnlistCall__Outputs {
    return new UnlistCall__Outputs(this);
  }
}

export class UnlistCall__Inputs {
  _call: UnlistCall;

  constructor(call: UnlistCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnlistCall__Outputs {
  _call: UnlistCall;

  constructor(call: UnlistCall) {
    this._call = call;
  }
}

export class UpdateFeeRecipientCall extends ethereum.Call {
  get inputs(): UpdateFeeRecipientCall__Inputs {
    return new UpdateFeeRecipientCall__Inputs(this);
  }

  get outputs(): UpdateFeeRecipientCall__Outputs {
    return new UpdateFeeRecipientCall__Outputs(this);
  }
}

export class UpdateFeeRecipientCall__Inputs {
  _call: UpdateFeeRecipientCall;

  constructor(call: UpdateFeeRecipientCall) {
    this._call = call;
  }

  get newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeeRecipientCall__Outputs {
  _call: UpdateFeeRecipientCall;

  constructor(call: UpdateFeeRecipientCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeCall__Inputs {
    return new UpdatePlatformFeeCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeCall__Outputs {
    return new UpdatePlatformFeeCall__Outputs(this);
  }
}

export class UpdatePlatformFeeCall__Inputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }

  get newFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePlatformFeeCall__Outputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }
}

export class UpdateSignerCall extends ethereum.Call {
  get inputs(): UpdateSignerCall__Inputs {
    return new UpdateSignerCall__Inputs(this);
  }

  get outputs(): UpdateSignerCall__Outputs {
    return new UpdateSignerCall__Outputs(this);
  }
}

export class UpdateSignerCall__Inputs {
  _call: UpdateSignerCall;

  constructor(call: UpdateSignerCall) {
    this._call = call;
  }

  get newSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSignerCall__Outputs {
  _call: UpdateSignerCall;

  constructor(call: UpdateSignerCall) {
    this._call = call;
  }
}
